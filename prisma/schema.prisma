generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  password            String
  name                String?
  image               String?
  emailVerified       DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  aiUsage             AiUsage[]
  chatThreads         ChatThread[]
  invitationsAccepted Invitation[]        @relation("InvitationAccepter")
  invitationsSent     Invitation[]        @relation("InvitationInviter")
  orgMembers          OrgMember[]
  subscriptions       Subscription[]
  verificationTokens  VerificationToken[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  type       String
  expires    DateTime
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@index([identifier])
  @@index([userId])
  @@map("verification_tokens")
}

model Organization {
  id            String           @id @default(cuid())
  name          String
  slug          String           @unique
  description   String?
  logo          String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  industry      String?
  planTier      String?
  type          OrganizationType @default(BIDDER)
  website       String?
  aiUsages      AiUsage[]
  invitations   Invitation[]
  members       OrgMember[]
  plans         Plan[]
  subscriptions Subscription[]
  tenders       Tender[]

  @@map("organizations")
}

model OrgMember {
  id             String        @id @default(cuid())
  role           OrgMemberRole @default(MEMBER)
  joinedAt       DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  organizationId String
  position       String?
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@map("org_members")
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  name           String?
  position       String?
  token          String           @unique
  status         InvitationStatus @default(PENDING)
  type           InvitationType   @default(TEAM_MEMBER)
  role           OrgMemberRole    @default(MEMBER)
  expires        DateTime
  invitedById    String
  acceptedById   String?
  organizationId String
  acceptedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  acceptedBy     User?            @relation("InvitationAccepter", fields: [acceptedById], references: [id])
  invitedBy      User             @relation("InvitationInviter", fields: [invitedById], references: [id], onDelete: Cascade)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([status])
  @@index([token])
  @@map("invitations")
}

model Tender {
  id                String          @id @default(cuid())
  title             String
  description       String?
  reference         String?         @unique
  status            TenderStatus    @default(DRAFT)
  publishedAt       DateTime?
  deadline          DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  organizationId    String
  category          String?
  estimatedValue    String?
  regionLocation    String?
  contactPersonName String?
  contactNumber     String?
  contactEmail      String?
  companyWebsite    String?
  requirements      Json?
  preBidMeetingAt   DateTime?
  chatThreads       ChatThread[]
  chunks            Chunk[]
  extractedFiles    ExtractedFile[]
  organization      Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploads           Upload[]

  @@index([organizationId])
  @@index([status])
  @@index([deadline])
  @@map("tenders")
}

model Upload {
  id             String          @id @default(cuid())
  filename       String
  originalName   String
  kind           UploadKind
  status         UploadStatus    @default(PENDING)
  size           Int
  mimeType       String?
  url            String?
  storageKey     String?
  orgId          String?
  error          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  tenderId       String
  extractedFiles ExtractedFile[]
  tender         Tender          @relation(fields: [tenderId], references: [id], onDelete: Cascade)

  @@index([tenderId])
  @@index([status])
  @@index([orgId])
  @@map("uploads")
}

model ExtractedFile {
  id        String   @id @default(cuid())
  filename  String
  page      Int?
  content   String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenderId  String
  uploadId  String
  chunks    Chunk[]
  tender    Tender   @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  upload    Upload   @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@index([tenderId, uploadId, page])
  @@map("extracted_files")
}

model Chunk {
  id              String        @id @default(cuid())
  content         String        @db.VarChar(1500)
  embedding       Json?
  page            Int?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tenderId        String
  extractedFileId String
  extractedFile   ExtractedFile @relation(fields: [extractedFileId], references: [id], onDelete: Cascade)
  tender          Tender        @relation(fields: [tenderId], references: [id], onDelete: Cascade)

  @@index([tenderId, extractedFileId, page])
  @@map("chunks")
}

model ChatThread {
  id        String        @id @default(cuid())
  title     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  tenderId  String
  messages  ChatMessage[]
  tender    Tender        @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tenderId])
  @@map("chat_threads")
}

model ChatMessage {
  id        String          @id @default(cuid())
  role      ChatMessageRole
  content   String
  metadata  Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  threadId  String
  thread    ChatThread      @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([createdAt])
  @@map("chat_messages")
}

model AiUsage {
  id           String       @id @default(cuid())
  model        String
  inputTokens  Int
  outputTokens Int
  cost         Decimal      @db.Decimal(10, 6)
  month        DateTime
  createdAt    DateTime     @default(now())
  userId       String
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId, month, model])
  @@index([userId])
  @@index([createdAt])
  @@map("ai_usage")
}

model Plan {
  id             String         @id @default(cuid())
  name           String
  description    String?
  price          Decimal        @db.Decimal(10, 2)
  interval       PlanInterval
  features       Json?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscriptions  Subscription[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([isActive])
  @@map("plans")
}

model Subscription {
  id                 String             @id @default(cuid())
  status             SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean            @default(false)
  canceledAt         DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userId             String
  organizationId     String
  planId             String
  organization       Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan               Plan               @relation(fields: [planId], references: [id])
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

enum OrgMemberRole {
  ADMIN
  MEMBER
  VIEWER
}

enum OrganizationType {
  BIDDER
  PUBLISHER
}

enum TenderStatus {
  DRAFT
  PUBLISHED
  CLOSED
  AWARDED
  CANCELLED
}

enum UploadKind {
  zip
  pdf
}

enum UploadStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ChatMessageRole {
  user
  assistant
  system
}

enum PlanInterval {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum InvitationType {
  TEAM_MEMBER
}
